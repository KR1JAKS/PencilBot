from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardRemove
import app.keyboard as k
from app.db import point_pluse, add_player, top, add_chat_id
import sqlite3 as sq
import datetime

router = Router()

@router.message(CommandStart())
async def Start(message : Message):
    user = message.from_user
    if message.chat.type in ['group', 'supergroup', 'channel']:
        await message.reply('–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Pencil.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pen.')
    elif message.chat.type == 'private':
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}!</b>\n–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.', 
                            reply_markup=k.main,
                            parse_mode='HTML')

@router.message(Command('pen'))
async def Pencil(message: Message):
    user = message.from_user
    user_id = user.id
    username = user.first_name
    chat_id = message.chat.id

    if message.chat.type in ['group', 'supergroup', 'channel']:
        await add_player(user_id, username, chat_id)
        new_score = await point_pluse(user_id, chat_id)

        if new_score is not None:
            if new_score[0] >= 0:
                await message.reply(f'{user.first_name}, —É–≤–µ–ª–∏—á–∏–ª —Å–≤–æ–π pencil –Ω–∞ {new_score[0]} —Å–º, —Ç–µ–ø–µ—Ä—å –æ–Ω —Ä–∞–≤–µ–Ω {new_score[1]} —Å–º!\n\n–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.',
                                 reply_markup=ReplyKeyboardRemove())
            else:
                await message.reply(f'{user.first_name}, —É–º–µ–Ω—å—à–∏–ª —Å–≤–æ–π pencil –Ω–∞ {-new_score[0]} —Å–º, —Ç–µ–ø–µ—Ä—å –æ–Ω —Ä–∞–≤–µ–Ω {new_score[1]} —Å–º!\n\n–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.',
                                 reply_markup=ReplyKeyboardRemove())
        else:
            db = sq.connect('pencils.db')
            cur = db.cursor()
            cur.execute('SELECT next_update FROM accounts WHERE id = ? AND chat_id = ?', (user_id, chat_id))
            next_update_time = cur.fetchone()[0]
            db.close()

            remaining_time = datetime.datetime.strptime(next_update_time, '%Y-%m-%d %H:%M:%S') - datetime.datetime.now()
            hours, remainder = divmod(remaining_time.total_seconds(), 3600)
            minuts, seconds = divmod(remainder, 60)
            await message.reply(f'–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É.\n\n–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–æ–≤ {int(minuts)} –º–∏–Ω—É—Ç –∏ {int(seconds)} —Å–µ–∫—É–Ω–¥.')

    elif message.chat.type == 'private':
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}!</b>\n–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.', 
                            reply_markup=k.main,
                            parse_mode='HTML')

@router.message(Command('add'))
async def addbot(message: Message):
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç?',
                         reply_markup=k.startinline)     

@router.message(Command('help'))
async def help(message: Message):
    await message.answer("""
<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å</b> ü§î
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –ª—é–±–æ–π —á–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞.
2. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /pen.\n
<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>
1. /pen - –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç pencil –æ—Ç 0 –¥–æ 10 —Å–º.
2. /topen - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞.\n
<b>–í–ù–ò–ú–ê–ù–ò–ï</b>
–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.\n
<b>–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å</b>
<b>–û—Ç–µ—Ü –±–æ—Ç–∞</b> - –Ø.
<b>–û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ</b> - –ú–Ω–µ, –ò–ò(–ø–æ–º–æ–≥–∞–ª).
<b>–°–ë–ï–†:</b> 2202 2063 6416 6301 - –Ω–∞ –µ–¥—É.
""", parse_mode='HTML')

@router.message(Command('topen'))
async def top_command(message: Message):
    chat_id = message.chat.id
    players = await top(chat_id)
    if message.chat.type in ['group', 'supergroup', 'channel']:
        if players:
            player_list = "\n".join([f"{index + 1}) {username} - {score} —Å–º." for index, (id, username, score) in enumerate(players)])
            await message.reply(f"–¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤:\n{player_list}")
        else:
            await message.reply('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.')

    elif message.chat.type == 'private':
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}!</b>\n–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.', 
                            reply_markup=k.main,
                            parse_mode='HTML')

@router.message(F.text == '–ü–æ–º–æ—â—å üÜò')
async def help_btn(message: Message):
    await help(message)

@router.message(F.text == '–ù–∞—á–∞—Ç—å üéÆ')
async def Start_btn(message: Message):
    await Start(message)

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å ü§ñ –≤ —á–∞—Ç')
async def addbot_btn(message: Message):
    await addbot(message)